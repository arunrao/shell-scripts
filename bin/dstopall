#!/usr/bin/env bash
# dstopall - Stop all Docker containers
# Stops all running Docker containers with confirmation

set -Eeuo pipefail
IFS=$'\n\t'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../lib/common.sh
source "$SCRIPT_DIR/../lib/common.sh"

show_usage() {
    cat <<EOF
Usage: dstopall [options]

Stop all running Docker containers.

Options:
  -f, --force     Force stop without confirmation
  -t, --timeout   Timeout in seconds (default: 10)
  -h, --help      Show this help

Examples:
  dstopall                  # Stop all with confirmation
  dstopall --force          # Stop all without confirmation
  dstopall --timeout 30     # Stop with 30s timeout
EOF
}

main() {
    local force=false
    local timeout=10
    
    # Parse arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                show_usage
                exit 0
                ;;
            -f|--force)
                force=true
                shift
                ;;
            -t|--timeout)
                timeout="$2"
                shift 2
                ;;
            *)
                log_error "Unknown option: $1"
                show_usage
                exit 1
                ;;
        esac
    done
    
    need_cmd docker
    
    # Check if Docker daemon is running
    if ! docker info &>/dev/null; then
        die "Docker daemon is not running"
    fi
    
    # Get running containers
    local containers
    containers=$(docker ps -q)
    
    if [[ -z "$containers" ]]; then
        log_info "No running containers"
        exit 0
    fi
    
    local count
    count=$(echo "$containers" | wc -l | trim)
    
    log_info "Found $count running container(s):"
    docker ps --format "table {{.Names}}\t{{.Image}}\t{{.Status}}"
    echo ""
    
    if ! $force; then
        if ! confirm "Stop all containers?" "n"; then
            log_info "Operation cancelled"
            exit 0
        fi
    fi
    
    log_info "Stopping containers (timeout: ${timeout}s)..."
    if docker stop -t "$timeout" $containers; then
        log_success "All containers stopped"
    else
        die "Failed to stop some containers"
    fi
}

main "$@"
