#!/usr/bin/env bash
# gsed - Portable sed wrapper
# Uses GNU sed (gsed) on macOS if available, otherwise falls back to sed

set -Eeuo pipefail
IFS=$'\n\t'

# Resolve symlinks to find the real script location
SCRIPT_SOURCE="${BASH_SOURCE[0]}"
while [ -L "$SCRIPT_SOURCE" ]; do
    SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_SOURCE")" && pwd)"
    SCRIPT_SOURCE="$(readlink "$SCRIPT_SOURCE")"
    [[ $SCRIPT_SOURCE != /* ]] && SCRIPT_SOURCE="$SCRIPT_DIR/$SCRIPT_SOURCE"
done
SCRIPT_DIR="$(cd -P "$(dirname "$SCRIPT_SOURCE")" && pwd)"
# shellcheck source=../lib/common.sh
source "$SCRIPT_DIR/../lib/common.sh"

show_usage() {
    cat <<EOF
Usage: gsed [sed-options] <pattern> [file]

Portable sed wrapper that prefers GNU sed for consistency.

Features:
  - Uses gsed (GNU sed) on macOS if installed
  - Falls back to system sed on other platforms
  - Provides consistent behavior across platforms

Examples:
  gsed 's/old/new/g' file.txt
  echo "hello" | gsed 's/hello/world/'
  gsed -i 's/foo/bar/g' file.txt

Note: 
  On macOS, install GNU sed for full compatibility:
    brew install gnu-sed
EOF
}

main() {
    if [[ $# -gt 0 ]] && { [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]] || [[ "$1" == "--version" ]]; }; then
        show_usage
        echo ""
    fi
    
    local sed_cmd="sed"
    
    # On macOS, prefer GNU sed if installed via Homebrew
    if is_mac; then
        # Check for GNU sed in common Homebrew locations
        if [[ -x "/opt/homebrew/bin/gsed" ]]; then
            sed_cmd="/opt/homebrew/bin/gsed"
            log_debug "Using GNU sed (Homebrew Apple Silicon)"
        elif [[ -x "/usr/local/bin/gsed" ]]; then
            sed_cmd="/usr/local/bin/gsed"
            log_debug "Using GNU sed (Homebrew Intel)"
        else
            log_debug "Using BSD sed (consider installing: brew install gnu-sed)"
        fi
    fi
    
    # Execute sed with all arguments
    "$sed_cmd" "$@"
}

main "$@"
