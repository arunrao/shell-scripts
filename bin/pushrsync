#!/usr/bin/env bash
# pushrsync - Safe rsync push profile
# Push files to remote server with safe defaults

set -Eeuo pipefail
IFS=$'\n\t'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
# shellcheck source=../lib/common.sh
source "$SCRIPT_DIR/../lib/common.sh"

show_usage() {
    cat <<EOF
Usage: pushrsync <source> <destination>

Safely push files to remote server using rsync with sensible defaults.

Arguments:
  <source>       Source directory or file
  <destination>  Remote destination (user@host:/path)

Features:
  - Preserves permissions, times, and symlinks
  - Shows progress and statistics
  - Compresses data during transfer
  - Dry-run preview before actual sync
  - Excludes common unwanted files (.git, node_modules, etc.)

Examples:
  pushrsync ./myproject user@server:/var/www/
  pushrsync ~/docs/ user@backup.example.com:~/backups/docs/
EOF
}

main() {
    if [[ $# -lt 2 ]]; then
        log_error "Source and destination required"
        show_usage
        exit 1
    fi
    
    if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        show_usage
        exit 0
    fi
    
    need_cmd rsync
    
    local source="$1"
    local dest="$2"
    
    # Validate source
    if [[ ! -e "$source" ]]; then
        die "Source does not exist: $source"
    fi
    
    # Ensure source ends with / for directory sync
    if [[ -d "$source" ]] && [[ ! "$source" =~ /$ ]]; then
        source="$source/"
    fi
    
    local rsync_opts=(
        -avzh
        --progress
        --stats
        --exclude='.git'
        --exclude='node_modules'
        --exclude='.DS_Store'
        --exclude='Thumbs.db'
        --exclude='*.swp'
        --exclude='*.tmp'
        --exclude='.env.local'
    )
    
    log_info "Dry run: previewing changes..."
    echo ""
    
    # Dry run first
    if ! rsync --dry-run "${rsync_opts[@]}" "$source" "$dest"; then
        die "Dry run failed"
    fi
    
    echo ""
    log_warn "The above changes will be applied"
    
    if ! confirm "Proceed with actual sync?" "n"; then
        log_info "Sync cancelled"
        exit 0
    fi
    
    echo ""
    log_info "Syncing files..."
    
    # Actual sync
    if rsync "${rsync_opts[@]}" "$source" "$dest"; then
        log_success "Sync completed"
    else
        die "Sync failed"
    fi
}

main "$@"
